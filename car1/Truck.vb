'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.18444
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports CodeFluent.Runtime
Imports CodeFluent.Runtime.Utilities

Namespace car1
    
    'CodeFluent Entities generated (http://www.softfluent.com). Date: Monday, 14 April 2014 09:11.
    'Build:1.0.61214.0769
    <System.CodeDom.Compiler.GeneratedCodeAttribute("CodeFluent Entities", "1.0.61214.0769"),  _
     System.SerializableAttribute(),  _
     System.ComponentModel.DataObjectAttribute(),  _
     System.Diagnostics.DebuggerDisplayAttribute("EK={EntityKey}, VehicleType={VehicleType}, Id={Id}"),  _
     System.ComponentModel.TypeConverterAttribute(GetType(CodeFluent.Runtime.Design.NameTypeConverter))>  _
    Partial Public Class Truck
        Inherits car1.Car
        Implements System.ComponentModel.IDataErrorInfo, CodeFluent.Runtime.ICodeFluentMemberValidator, CodeFluent.Runtime.ICodeFluentSummaryValidator, System.IEquatable(Of car1.Truck)
        
        Private _weight As Single = CodeFluentPersistence.DefaultSingleValue
        
        <System.NonSerializedAttribute()>  _
        Protected _image As CodeFluent.Runtime.BinaryServices.BinaryLargeObject = CType(Nothing, CodeFluent.Runtime.BinaryServices.BinaryLargeObject)
        
        Public Sub New()
            MyBase.New
            Me._typeName = "car1.Truck"
        End Sub
        
        Public Overloads Overrides ReadOnly Property EntityDisplayName() As String
            Get
                Return Me.VehicleType
            End Get
        End Property
        
        <System.ComponentModel.DefaultValueAttribute(CodeFluentPersistence.DefaultSingleValue),  _
         System.Xml.Serialization.XmlElementAttribute(IsNullable:=false, Type:=GetType(Single))>  _
        Public Property Weight() As Single
            Get
                Return Me._weight
            End Get
            Set
                Me._weight = value
                Me.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified
                Me.OnPropertyChanged(New System.ComponentModel.PropertyChangedEventArgs("Weight"))
            End Set
        End Property
        
        <System.Xml.Serialization.XmlIgnoreAttribute(),  _
         System.ComponentModel.TypeConverterAttribute(GetType(CodeFluent.Runtime.Design.BinaryLargeObjectTypeConverter2))>  _
        Public ReadOnly Property Image() As CodeFluent.Runtime.BinaryServices.BinaryLargeObject
            Get
                If (Me._image Is Nothing) Then
                    Me._image = CodeFluentContext.Get(car1.Constants.car1StoreName).Configuration.BinaryServices.CreateObject(Me)
                    Me._image.PersistenceOptions.AddIdentifierColumnName("Car_Id")
                    Me._image.PersistenceOptions.AddLoadMetaDataParameterName("Id")
                    Me._image.PersistenceOptions.AddLoadParameterName("Car_Id")
                    Me._image.PersistenceOptions.AddSaveParameterName("Car_Id")
                    Me._image.PersistenceOptions.DataColumnName = "Truck_Image"
                    Me._image.PersistenceOptions.MetaDatasMask = CodeFluent.Runtime.BinaryServices.BinaryLargeObjectMetaDatas.All
                    Me._image.PersistenceOptions.PackageName = "Truck"
                    Me._image.PersistenceOptions.Schema = Nothing
                    Me._image.PersistenceOptions.LoadMetaDataProcedureName = "Load"
                    Me._image.PersistenceOptions.LoadProcedureName = "LoadBlobTruck_Image"
                    Me._image.PersistenceOptions.SaveProcedureName = "SaveBlobTruck_Image"
                    Me._image.PersistenceOptions.SaveChunkProcedureName = "SaveBlobChunkTruck_Image"
                    Me._image.PersistenceOptions.FileNameColumnName = "Truck_Image_FileName"
                    Me._image.PersistenceOptions.ContentTypeColumnName = "Truck_Image_ContentType"
                    Me._image.PersistenceOptions.AttributesColumnName = "Truck_Image_Attributes"
                    Me._image.PersistenceOptions.SizeColumnName = "Truck_Image_Size"
                    Me._image.PersistenceOptions.LastWriteTimeUtcColumnName = "Truck_Image_LastWriteTimeUtc"
                    Me._image.PersistenceOptions.LastAccessTimeUtcColumnName = "Truck_Image_LastAccessTimeUtc"
                    Me._image.PersistenceOptions.CreationTimeUtcColumnName = "Truck_Image_CreationTimeUtc"
                    Me._image.AddIdentifierValue(Me.Id)
                End If
                Return Me._image
            End Get
        End Property
        
        Public Overloads Overridable Function Equals(ByVal truck As car1.Truck) As Boolean Implements System.IEquatable(Of car1.Truck).Equals
            If (truck Is Nothing) Then
                Return false
            End If
            If (Me.Id = -1) Then
                Return MyBase.Equals(truck)
            End If
            Return (Me.Id.Equals(truck.Id) = true)
        End Function
        
        Public Overloads Overrides Function GetHashCode() As Integer
            Return MyBase.GetHashCode
        End Function
        
        Public Overloads Overrides Function Equals(ByVal obj As Object) As Boolean
            Dim truck As car1.Truck = Nothing
            Try 
                truck = CType(obj,car1.Truck)
            Catch icex As System.InvalidCastException
                truck = Nothing
            End Try
            Return Me.Equals(truck)
        End Function
        
        Public Overloads Overrides Function Validate(ByVal culture As System.Globalization.CultureInfo) As String
            Return MyBase.Validate(culture)
        End Function
        
        Public Overloads Overrides Sub Validate(ByVal culture As System.Globalization.CultureInfo, ByVal results As System.Collections.Generic.IList(Of CodeFluent.Runtime.CodeFluentValidationException))
            MyBase.Validate(culture, results)
        End Sub
        
        Public Overloads Overrides Function ToTruck(ByVal copyTo As Boolean, ByVal deep As Boolean) As car1.Truck
            Return Me
        End Function
        
        Protected Overloads Overrides Sub ReadRecord(ByVal reader As System.Data.IDataReader, ByVal options As CodeFluent.Runtime.CodeFluentReloadOptions)
            If (reader Is Nothing) Then
                Throw New System.ArgumentNullException("reader")
            End If
            MyBase.ReadRecord(reader, options)
            If (((options And CodeFluent.Runtime.CodeFluentReloadOptions.Properties)  _
                        = 0)  _
                        = false) Then
                Me._weight = CodeFluentPersistence.GetReaderValue(reader, "Truck_Weight", CType(CodeFluentPersistence.DefaultSingleValue,Single))
                Me.Image.LoadMetaData(reader)
            End If
            Me.OnEntityAction(New CodeFluent.Runtime.CodeFluentEntityActionEventArgs(Me, CodeFluent.Runtime.CodeFluentEntityAction.ReadRecord, false, false))
        End Sub
        
        Protected Overloads Overrides Sub ReadRecordOnSave(ByVal reader As System.Data.IDataReader)
            If (reader Is Nothing) Then
                Throw New System.ArgumentNullException("reader")
            End If
            MyBase.ReadRecordOnSave(reader)
            Me.OnEntityAction(New CodeFluent.Runtime.CodeFluentEntityActionEventArgs(Me, CodeFluent.Runtime.CodeFluentEntityAction.ReadRecordOnSave, false, false))
        End Sub
        
        <System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Shadows Shared Function Load(ByVal id As Integer) As car1.Truck
            If (id = -1) Then
                Return Nothing
            End If
            Dim truck As car1.Truck = New car1.Truck()
            Dim persistence As CodeFluent.Runtime.CodeFluentPersistence = CodeFluentContext.Get(car1.Constants.car1StoreName).Persistence
            persistence.CreateStoredProcedureCommand(Nothing, "Truck", "Load")
            persistence.AddParameter("@Id", id, CType(-1,Integer))
            Dim reader As System.Data.IDataReader = Nothing
            Try 
                reader = persistence.ExecuteReader
                If (reader.Read = true) Then
                    truck.ReadRecord(reader, CodeFluent.Runtime.CodeFluentReloadOptions.[Default])
                    truck.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Unchanged
                    Return truck
                End If
            Finally
                If (Not (reader) Is Nothing) Then
                    reader.Dispose
                End If
                persistence.CompleteCommand
            End Try
            Return Nothing
        End Function
        
        <System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Shadows Shared Function LoadById(ByVal id As Integer) As car1.Truck
            If (id = -1) Then
                Return Nothing
            End If
            Dim truck As car1.Truck = New car1.Truck()
            Dim persistence As CodeFluent.Runtime.CodeFluentPersistence = CodeFluentContext.Get(car1.Constants.car1StoreName).Persistence
            persistence.CreateStoredProcedureCommand(Nothing, "Truck", "LoadById")
            persistence.AddParameter("@Id", id, CType(-1,Integer))
            Dim reader As System.Data.IDataReader = Nothing
            Try 
                reader = persistence.ExecuteReader
                If (reader.Read = true) Then
                    truck.ReadRecord(reader, CodeFluent.Runtime.CodeFluentReloadOptions.[Default])
                    truck.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Unchanged
                    Return truck
                End If
            Finally
                If (Not (reader) Is Nothing) Then
                    reader.Dispose
                End If
                persistence.CompleteCommand
            End Try
            Return Nothing
        End Function
        
        Public Overloads Overrides Function Reload(ByVal options As CodeFluent.Runtime.CodeFluentReloadOptions) As Boolean
            Dim ret As Boolean = false
            If (Me.Id = -1) Then
                Return ret
            End If
            Dim persistence As CodeFluent.Runtime.CodeFluentPersistence = CodeFluentContext.Get(car1.Constants.car1StoreName).Persistence
            persistence.CreateStoredProcedureCommand(Nothing, "Truck", "Load")
            persistence.AddParameter("@Id", Me.Id, CType(-1,Integer))
            Dim reader As System.Data.IDataReader = Nothing
            Try 
                reader = persistence.ExecuteReader
                If (reader.Read = true) Then
                    Me.ReadRecord(reader, options)
                    Me.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Unchanged
                    ret = true
                Else
                    Me.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Deleted
                End If
            Finally
                If (Not (reader) Is Nothing) Then
                    reader.Dispose
                End If
                persistence.CompleteCommand
            End Try
            Return ret
        End Function
        
        Protected Overloads Overrides Function BaseSave(ByVal force As Boolean) As Boolean
            If (Me.EntityState = CodeFluent.Runtime.CodeFluentEntityState.ToBeDeleted) Then
                car1.Truck.Delete(Me)
                Return false
            End If
            Dim evt As CodeFluent.Runtime.CodeFluentEntityActionEventArgs = New CodeFluent.Runtime.CodeFluentEntityActionEventArgs(Me, CodeFluent.Runtime.CodeFluentEntityAction.Saving, true)
            Me.OnEntityAction(evt)
            If (evt.Cancel = true) Then
                Return false
            End If
            CodeFluentPersistence.ThrowIfDeleted(Me)
            Me.Validate
            If ((force = false)  _
                        AndAlso (Me.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Unchanged)) Then
                Return false
            End If
            Dim persistence As CodeFluent.Runtime.CodeFluentPersistence = CodeFluentContext.Get(car1.Constants.car1StoreName).Persistence
            persistence.CreateStoredProcedureCommand(Nothing, "Truck", "Save")
            persistence.AddParameter("@Car_Id", Me.Id, CType(-1,Integer))
            persistence.AddParameter("@Car_MinDays", Me.MinDays, CodeFluentPersistence.DefaultInt32Value)
            persistence.AddParameter("@Car_VehicleType", Me.VehicleType, CType(Nothing, String))
            persistence.AddRawParameterEnumInt32("@Car_VehicleStatus", Me.VehicleStatus)
            persistence.AddParameter("@Car_CarGroup_Id", Me.CarGroupId, CType(-1,Integer))
            persistence.AddParameter("@Car_SerialNumber", Me.SerialNumber, CodeFluentPersistence.DefaultInt32Value)
            persistence.AddParameter("@_typeName", Me.TypeName)
            persistence.AddParameter("@_trackLastWriteUser", persistence.Context.User.Name)
            persistence.AddParameter("@_rowVersion", Me.RowVersion)
            persistence.AddParameter("@Truck_Weight", Me.Weight, CodeFluentPersistence.DefaultSingleValue)
            If (Not (Me._carPicture) Is Nothing) Then
                Me._carPicture.SaveMetaData(persistence.Context)
            End If
            If (Not (Me._carDocument) Is Nothing) Then
                Me._carDocument.SaveMetaData(persistence.Context)
            End If
            If (Not (Me._carVideo) Is Nothing) Then
                Me._carVideo.SaveMetaData(persistence.Context)
            End If
            If (Not (Me._image) Is Nothing) Then
                Me._image.SaveMetaData(persistence.Context)
            End If
            Dim reader As System.Data.IDataReader = Nothing
            Try 
                reader = persistence.ExecuteReader
                If (reader.Read = true) Then
                    Me.ReadRecordOnSave(reader)
                End If
                CodeFluentPersistence.NextResults(reader)
            Finally
                If (Not (reader) Is Nothing) Then
                    reader.Dispose
                End If
                persistence.CompleteCommand
            End Try
            Me.OnEntityAction(New CodeFluent.Runtime.CodeFluentEntityActionEventArgs(Me, CodeFluent.Runtime.CodeFluentEntityAction.Saved, false, false))
            Me.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Unchanged
            Return true
        End Function
        
        Public Overloads Overrides Function Save() As Boolean
            Dim localSave As Boolean = MyBase.Save
            Return localSave
        End Function
        
        <System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Shared Function Save(ByVal truck As car1.Truck) As Boolean
            If (truck Is Nothing) Then
                Return false
            End If
            Dim ret As Boolean = truck.Save
            Return ret
        End Function
        
        <System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Shared Function Insert(ByVal truck As car1.Truck) As Boolean
            Dim ret As Boolean = car1.Truck.Save(truck)
            Return ret
        End Function
        
        <System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Shared Function Delete(ByVal truck As car1.Truck) As Boolean
            If (truck Is Nothing) Then
                Return false
            End If
            Dim ret As Boolean = truck.Delete
            Return ret
        End Function
        
        Protected Overloads Overrides Sub BaseTrace(ByVal writer As System.CodeDom.Compiler.IndentedTextWriter)
            writer.Write("[")
            writer.Write("Weight=")
            writer.Write(Me.Weight)
            writer.Write(",")
            writer.Write("Image=")
            CType(Me.Image,CodeFluent.Runtime.Diagnostics.ITraceable).Trace(writer)
            writer.Write(", <base>=")
            MyBase.BaseTrace(writer)
            writer.Write("]")
        End Sub
        
        Protected Overloads Overrides Sub BinaryLargeObjectsReset()
            MyBase.BinaryLargeObjectsReset
            If (Not (Me._image) Is Nothing) Then
                Me._image.ClearIdentifiersValues
                Me._image.AddIdentifierValue(Me.Id)
            End If
        End Sub
        
        Protected Overloads Overridable Sub BinaryLargeObjectsCopyTo(ByVal truck As car1.Truck)
            If (truck Is Nothing) Then
                Throw New System.ArgumentNullException("truck")
            End If
            MyBase.BinaryLargeObjectsCopyTo(Me)
            If (Not (Me._image) Is Nothing) Then
                truck._image = Me._image
            End If
        End Sub
        
        <System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Shadows Shared Function LoadByEntityKey(ByVal key As String) As car1.Truck
            If (key Is String.Empty) Then
                Return Nothing
            End If
            Dim truck As car1.Truck
            Dim var As Integer = CType(ConvertUtilities.ChangeType(key, GetType(Integer), -1),Integer)
            truck = car1.Truck.Load(var)
            Return truck
        End Function
        
        Public Shadows Function Clone(ByVal deep As Boolean) As car1.Truck
            Dim truck As car1.Truck = New car1.Truck()
            Me.CopyTo(truck, deep)
            Return truck
        End Function
        
        Public Overloads Overrides Sub CopyFrom(ByVal dict As System.Collections.IDictionary, ByVal deep As Boolean)
            If (dict Is Nothing) Then
                Throw New System.ArgumentNullException("dict")
            End If
            MyBase.CopyFrom(dict, deep)
            If (dict.Contains("Weight") = true) Then
                Me.Weight = CType(ConvertUtilities.ChangeType(dict("Weight"), GetType(Single), CodeFluentPersistence.DefaultSingleValue),Single)
            End If
            If (dict.Contains("Image") = true) Then
                Me.Image.SavePostedFile(dict("Image"))
            End If
            Me.OnEntityAction(New CodeFluent.Runtime.CodeFluentEntityActionEventArgs(Me, CodeFluent.Runtime.CodeFluentEntityAction.CopyFrom, false, dict))
        End Sub
        
        Public Overloads Overridable Sub CopyTo(ByVal truck As car1.Truck, ByVal deep As Boolean)
            If (truck Is Nothing) Then
                Throw New System.ArgumentNullException("truck")
            End If
            MyBase.CopyTo(truck, deep)
            truck.Weight = Me.Weight
            truck._image = Me._image
            Me.OnEntityAction(New CodeFluent.Runtime.CodeFluentEntityActionEventArgs(Me, CodeFluent.Runtime.CodeFluentEntityAction.CopyTo, false, truck))
        End Sub
        
        Public Overloads Overrides Sub CopyTo(ByVal dict As System.Collections.IDictionary, ByVal deep As Boolean)
            If (dict Is Nothing) Then
                Throw New System.ArgumentNullException("dict")
            End If
            MyBase.CopyTo(dict, deep)
            dict("Weight") = Me.Weight
            dict("Image") = Me.Image
            Me.OnEntityAction(New CodeFluent.Runtime.CodeFluentEntityActionEventArgs(Me, CodeFluent.Runtime.CodeFluentEntityAction.CopyTo, false, dict))
        End Sub
    End Class
End Namespace
