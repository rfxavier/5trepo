'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.18444
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports CodeFluent.Runtime
Imports CodeFluent.Runtime.Utilities
<Assembly: CodeFluent.Runtime.Utilities.CodeFluentGeneratedAttribute("1.0.61214.0769", "CodeFluent Entities generated (http://www.softfluent.com). Date: Saturday, 12 Apr"& _ 
    "il 2014 18:46.", CodeFluent.Runtime.Utilities.CodeFluentGeneratedAttributeOptions.CompiledWithVisualStudio, 2880000616UI)> 

Namespace car1.Resources
    
    'CodeFluent Entities generated (http://www.softfluent.com). Date: Saturday, 12 April 2014 18:46.
    'Build:1.0.61214.0769
    <System.CodeDom.Compiler.GeneratedCodeAttribute("CodeFluent Entities", "1.0.61214.0769")>  _
    Partial Public NotInheritable Class Manager
        
        Private Shared _loader As Manager
        
        Private _resources As System.Resources.ResourceManager
        
        Private Sub New()
            MyBase.New
            Me._resources = New System.Resources.ResourceManager("car1.car1", System.Reflection.[Assembly].GetExecutingAssembly)
            Try 
                Me._resources.GetString("_cf_build")
            Catch e As System.Resources.MissingManifestResourceException
                Throw New CodeFluent.Runtime.CodeFluentRuntimeException("CF6050: Cannot find resource set in the current assembly. If this project was com"& _ 
                        "piled with CodeFluent, you should not specify the 'runtimeResourceBaseName' attr"& _ 
                        "ibute, nor the 'resourceFileFormat' attribute in CodeDomProducer configuration. "& _ 
                        "If this project was compiled with Microsoft Visual Studio 2003 or higher, please"& _ 
                        " make sure the project's Default Namespace is empty, or configure CodeDomProduce"& _ 
                        "r with the 'runtimeResourceBaseName' attribute. If this project was compiled wit"& _ 
                        "h Microsoft Visual Studio 2005 or higher, please make sure the 'resourceFileForm"& _ 
                        "at' attribute is set to 'resx' as well.", e)
            End Try
        End Sub
        
        Public Shared ReadOnly Property USER_NOT_FOUND() As String
            Get
                Return Manager.GetString("USER_NOT_FOUND", "USER_NOT_FOUND")
            End Get
        End Property
        
        Private Shared Function GetLoader() As Manager
            If (Manager._loader Is Nothing) Then
                Dim type As System.Type = GetType(Manager)
                System.Threading.Monitor.Enter(type)
                Try 
                    If (Manager._loader Is Nothing) Then
                        Manager._loader = New Manager()
                    End If
                Finally
                    System.Threading.Monitor.Exit(type)
                End Try
            End If
            Return Manager._loader
        End Function
        
        Public Overloads Shared Function GetObject(ByVal culture As System.Globalization.CultureInfo, ByVal name As String, ByVal defaultValue As String) As Object
            Dim loader As Manager = Manager.GetLoader
            Dim obj As Object = loader._resources.GetObject(name, culture)
            If (obj Is Nothing) Then
                Return defaultValue
            End If
            Return obj
        End Function
        
        Public Overloads Shared Function GetObject(ByVal name As String, ByVal defaultValue As String) As Object
            Return Manager.GetObject(Nothing, name, defaultValue)
        End Function
        
        Public Overloads Shared Function GetString(ByVal culture As System.Globalization.CultureInfo, ByVal name As String, ByVal args() As Object) As String
            Dim loader As Manager = Manager.GetLoader
            Dim str As String = loader._resources.GetString(name, culture)
            If (str Is Nothing) Then
                Return name
            End If
            If (Not (args) Is Nothing) Then
                Return String.Format(culture, str, args)
            Else
                Return str
            End If
        End Function
        
        Public Overloads Shared Function GetString(ByVal name As String, ByVal args() As Object) As String
            Return Manager.GetString(Nothing, name, args)
        End Function
        
        Public Overloads Shared Function GetString(ByVal name As String, ByVal defaultValue As String) As String
            Return Manager.GetStringWithDefault(Nothing, name, defaultValue, Nothing)
        End Function
        
        Public Overloads Shared Function GetStringWithDefault(ByVal culture As System.Globalization.CultureInfo, ByVal name As String, ByVal defaultValue As String, ByVal args() As Object) As String
            Dim loader As Manager = Manager.GetLoader
            Dim str As String = loader._resources.GetString(name, culture)
            If (str Is Nothing) Then
                If ((defaultValue Is Nothing)  _
                            OrElse (args Is Nothing)) Then
                    Return defaultValue
                Else
                    Return String.Format(culture, defaultValue, args)
                End If
            End If
            If (Not (args) Is Nothing) Then
                Return String.Format(culture, str, args)
            Else
                Return str
            End If
        End Function
        
        Public Overloads Shared Function GetStringWithDefault(ByVal name As String, ByVal defaultValue As String, ByVal args() As Object) As String
            Return Manager.GetStringWithDefault(Nothing, name, defaultValue, args)
        End Function
        
        Public Overloads Shared Function GetStringWithDefault(ByVal name As String, ByVal defaultValue As String) As String
            Return Manager.GetStringWithDefault(Nothing, name, defaultValue, Nothing)
        End Function
        
        Public Shared Function GetUserMessage(ByVal culture As System.Globalization.CultureInfo, ByVal type As CodeFluent.Runtime.UserExceptionType, ByVal name As String, <System.ParamArrayAttribute()> ByVal args() As Object) As String
            Dim code As String = String.Concat(CodeFluent.Runtime.CodeFluentRuntimeException.UserMessagePrefix, ".", type.ToString, ".", name)
            Dim loader As Manager = Manager.GetLoader
            Dim str As String = loader._resources.GetString(code, culture)
            If (str Is Nothing) Then
                code = String.Concat(CodeFluent.Runtime.CodeFluentRuntimeException.UserMessagePrefix, ".", type.ToString)
                str = loader._resources.GetString(code, culture)
                If (str Is Nothing) Then
                    str = CodeFluent.Runtime.CodeFluentRuntimeException.GetUserMessage(culture, type, args)
                End If
            End If
            If (Not (args) Is Nothing) Then
                Return String.Format(culture, str, args)
            Else
                Return str
            End If
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("CodeFluent Entities", "1.0.61214.0769")>  _
    Partial Public NotInheritable Class ValueValidationFailureHandler
        Inherits CodeFluent.Runtime.Rules.BaseValueValidationFailureHandler
        
        Private Shared _current As car1.Resources.ValueValidationFailureHandler = New car1.Resources.ValueValidationFailureHandler()
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Public Shared ReadOnly Property Current() As car1.Resources.ValueValidationFailureHandler
            Get
                Return car1.Resources.ValueValidationFailureHandler._current
            End Get
        End Property
        
        Public Overloads Overrides Function GetMessage(ByVal culture As System.Globalization.CultureInfo, ByVal validator As CodeFluent.Runtime.Rules.ValueValidator, ByVal failureCode As String, ByVal arguments() As Object) As String
            Dim baseMessage As String = MyBase.GetMessage(culture, validator, failureCode, arguments)
            Dim code As String = Me.GetCode(validator, failureCode)
            Dim message As String = car1.Resources.Manager.GetString(culture, code, arguments)
            If (message = code) Then
                Return baseMessage
            End If
            Return message
        End Function
    End Class
End Namespace

Namespace car1
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("CodeFluent Entities", "1.0.61214.0769")>  _
    Partial Public NotInheritable Class Constants
        
        Public Const car1StoreName As String = "car1"
        
        Private Sub New()
            MyBase.New
        End Sub
    End Class
End Namespace
