'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.18444
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports CodeFluent.Runtime
Imports CodeFluent.Runtime.Utilities

Namespace car1
    
    'CodeFluent Entities generated (http://www.softfluent.com). Date: Monday, 14 April 2014 09:11.
    'Build:1.0.61214.0769
    <System.CodeDom.Compiler.GeneratedCodeAttribute("CodeFluent Entities", "1.0.61214.0769"),  _
     System.SerializableAttribute(),  _
     System.ComponentModel.DataObjectAttribute(),  _
     System.Diagnostics.DebuggerDisplayAttribute("Count={Count}"),  _
     System.ComponentModel.TypeConverterAttribute(GetType(CodeFluent.Runtime.Design.CollectionTypeConverter))>  _
    Partial Public Class OfferCollection
        Implements System.Collections.IList, System.Collections.ICollection, CodeFluent.Runtime.ICodeFluentSet, System.Collections.Generic.IList(Of car1.Offer), System.Collections.Generic.ICollection(Of car1.Offer), System.ComponentModel.IRaiseItemChangedEvents, System.ICloneable, System.ComponentModel.INotifyPropertyChanged, System.Collections.Specialized.INotifyCollectionChanged, System.ComponentModel.IBindingList, System.ComponentModel.ICancelAddNew
        
        Private _raisePropertyChangedEvents As Boolean = true
        
        Private _raiseCollectionChangedEvents As Boolean = true
        
        <System.NonSerializedAttribute()>  _
        Private _baseList As System.Collections.Generic.List(Of car1.Offer) = New System.Collections.Generic.List(Of car1.Offer)()
        
        <System.NonSerializedAttribute()>  _
        Private _baseTable As System.Collections.Generic.Dictionary(Of Integer, car1.Offer) = New System.Collections.Generic.Dictionary(Of Integer, car1.Offer)()
        
        <System.NonSerializedAttribute()>  _
        Private _relations As System.Collections.Hashtable = New System.Collections.Hashtable()
        
        Private _maxCount As Integer = 2147483647
        
        <System.NonSerializedAttribute()>  _
        Private _unspecifiedCarGroupCarGroupUpgrade As car1.CarGroup
        
        <System.NonSerializedAttribute()>  _
        Private _offersRentalAgreementRentals As car1.RentalAgreement
        
        <System.NonSerializedAttribute()>  _
        Private _addNewPos As Integer = -1
        
        <System.NonSerializedAttribute()>  _
        Private _blm1958066213 As CodeFluent.Runtime.Utilities.BindingListManager(Of car1.Offer)
        
        Private _raiseListChangedEvents As Boolean = true
        
Public Event CollectionChanged As System.ComponentModel.CollectionChangeEventHandler Implements CodeFluent.Runtime.ICodeFluentSet.CollectionChanged
Public Event PropertyChanged As System.ComponentModel.PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
Private Event System_Collections_Specialized_INotifyCollectionChanged_CollectionChanged As System.Collections.Specialized.NotifyCollectionChangedEventHandler Implements System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged
        Private _h2943838991 As Object
        
        Public Sub New()
            MyBase.New
            Me._blm1958066213 = New CodeFluent.Runtime.Utilities.BindingListManager(Of car1.Offer)(Me)
        End Sub
        
        Public Sub New(ByVal unspecifiedCarGroupCarGroupUpgrade As car1.CarGroup, ByVal offersRentalAgreementRentals As car1.RentalAgreement)
            MyBase.New
            Me._blm1958066213 = New CodeFluent.Runtime.Utilities.BindingListManager(Of car1.Offer)(Me)
            Me._unspecifiedCarGroupCarGroupUpgrade = unspecifiedCarGroupCarGroupUpgrade
            Me._offersRentalAgreementRentals = offersRentalAgreementRentals
        End Sub
        
        <System.ComponentModel.BrowsableAttribute(false),  _
         System.Xml.Serialization.XmlIgnoreAttribute()>  _
        Public Overridable Property RaisePropertyChangedEvents() As Boolean
            Get
                Return Me._raisePropertyChangedEvents
            End Get
            Set
                Me._raisePropertyChangedEvents = value
            End Set
        End Property
        
        Public Overridable Property RaiseCollectionChangedEvents() As Boolean
            Get
                Return Me._raiseCollectionChangedEvents
            End Get
            Set
                Me._raiseCollectionChangedEvents = value
            End Set
        End Property
        
        <System.Xml.Serialization.XmlIgnoreAttribute()>  _
        Protected ReadOnly Property BaseList() As System.Collections.Generic.List(Of car1.Offer)
            Get
                Return Me._baseList
            End Get
        End Property
        
        <System.Xml.Serialization.XmlIgnoreAttribute()>  _
        Protected ReadOnly Property BaseTable() As System.Collections.Generic.Dictionary(Of Integer, car1.Offer)
            Get
                Return Me._baseTable
            End Get
        End Property
        
        <System.Xml.Serialization.XmlIgnoreAttribute()>  _
        Public ReadOnly Property Relations() As System.Collections.IDictionary Implements CodeFluent.Runtime.ICodeFluentSet.Relations
            Get
                Return Me._relations
            End Get
        End Property
        
        <System.Xml.Serialization.XmlElementAttribute(IsNullable:=false)>  _
        Public Overridable Property MaxCount() As Integer
            Get
                Return Me._maxCount
            End Get
            Set
                Me._maxCount = value
            End Set
        End Property
        
        <System.Xml.Serialization.XmlIgnoreAttribute()>  _
        Public ReadOnly Property UnspecifiedCarGroupCarGroupUpgrade() As car1.CarGroup
            Get
                Return Me._unspecifiedCarGroupCarGroupUpgrade
            End Get
        End Property
        
        <System.Xml.Serialization.XmlIgnoreAttribute()>  _
        Public ReadOnly Property OffersRentalAgreementRentals() As car1.RentalAgreement
            Get
                Return Me._offersRentalAgreementRentals
            End Get
        End Property
        
        Public Default Property Item(ByVal index As Integer) As car1.Offer Implements System.Collections.Generic.IList(Of car1.Offer).Item
            Get
                Return CType(Me.BaseList(index),car1.Offer)
            End Get
            Set
                Me.BaseList(index) = value
            End Set
        End Property
        
        <System.ComponentModel.BrowsableAttribute(false),  _
         System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)>  _
        Property System_Collections_IList_Item(ByVal index As Integer) As Object Implements System.Collections.IList.Item
            Get
                Dim i As Object = Me.BaseList(index)
                Return i
            End Get
            Set
                Me.BaseList(index) = CType(value,car1.Offer)
            End Set
        End Property
        
        Public Overridable ReadOnly Property Count() As Integer Implements System.Collections.Generic.ICollection(Of car1.Offer).Count
            Get
                Dim v As Integer = CType(Me.BaseList,System.Collections.IList).Count
                Return v
            End Get
        End Property
        
        <System.ComponentModel.BrowsableAttribute(false),  _
         System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)>  _
        ReadOnly Property System_Collections_ICollection_Count() As Integer Implements System.Collections.ICollection.Count
            Get
                Dim v As Integer = Me.Count
                Return v
            End Get
        End Property
        
        <System.ComponentModel.BrowsableAttribute(false),  _
         System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)>  _
        ReadOnly Property CodeFluent_Runtime_ICodeFluentSet_Count() As Integer Implements CodeFluent.Runtime.ICodeFluentSet.Count
            Get
                Dim v As Integer = Me.Count
                Return v
            End Get
        End Property
        
        Public Overridable ReadOnly Property IsSynchronized() As Boolean
            Get
                Dim v As Boolean = CType(Me.BaseList,System.Collections.IList).IsSynchronized
                Return v
            End Get
        End Property
        
        <System.ComponentModel.BrowsableAttribute(false),  _
         System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)>  _
        ReadOnly Property System_Collections_ICollection_IsSynchronized() As Boolean Implements System.Collections.ICollection.IsSynchronized
            Get
                Dim v As Boolean = Me.IsSynchronized
                Return v
            End Get
        End Property
        
        Public Overridable ReadOnly Property SyncRoot() As Object
            Get
                Dim v As Object = CType(Me.BaseList,System.Collections.IList).SyncRoot
                Return v
            End Get
        End Property
        
        <System.ComponentModel.BrowsableAttribute(false),  _
         System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)>  _
        ReadOnly Property System_Collections_ICollection_SyncRoot() As Object Implements System.Collections.ICollection.SyncRoot
            Get
                Dim v As Object = Me.SyncRoot
                Return v
            End Get
        End Property
        
        Public Overridable ReadOnly Property IsFixedSize() As Boolean
            Get
                Dim v As Boolean = CType(Me.BaseList,System.Collections.IList).IsFixedSize
                Return v
            End Get
        End Property
        
        <System.ComponentModel.BrowsableAttribute(false),  _
         System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)>  _
        ReadOnly Property System_Collections_IList_IsFixedSize() As Boolean Implements System.Collections.IList.IsFixedSize
            Get
                Dim v As Boolean = Me.IsFixedSize
                Return v
            End Get
        End Property
        
        Public Overridable ReadOnly Property IsReadOnly() As Boolean Implements System.Collections.Generic.ICollection(Of car1.Offer).IsReadOnly
            Get
                Dim v As Boolean = CType(Me.BaseList,System.Collections.IList).IsReadOnly
                Return v
            End Get
        End Property
        
        <System.ComponentModel.BrowsableAttribute(false),  _
         System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)>  _
        ReadOnly Property System_Collections_IList_IsReadOnly() As Boolean Implements System.Collections.IList.IsReadOnly
            Get
                Dim v As Boolean = Me.IsReadOnly
                Return v
            End Get
        End Property
        
        Public Overridable Property RaiseListChangedEvents() As Boolean
            Get
                Return Me._raiseListChangedEvents
            End Get
            Set
                Me._raiseListChangedEvents = value
            End Set
        End Property
        
        Private ReadOnly Property AllowEdit() As Boolean Implements System.ComponentModel.IBindingList.AllowEdit
            Get
                Return Me._blm1958066213.AllowEdit
            End Get
        End Property
        
        Private ReadOnly Property AllowNew() As Boolean Implements System.ComponentModel.IBindingList.AllowNew
            Get
                Return Me._blm1958066213.AllowNew
            End Get
        End Property
        
        Private ReadOnly Property AllowRemove() As Boolean Implements System.ComponentModel.IBindingList.AllowRemove
            Get
                Return Me._blm1958066213.AllowRemove
            End Get
        End Property
        
        Private ReadOnly Property IsSorted() As Boolean Implements System.ComponentModel.IBindingList.IsSorted
            Get
                Return Me._blm1958066213.IsSorted
            End Get
        End Property
        
        Private ReadOnly Property SortDirection() As System.ComponentModel.ListSortDirection Implements System.ComponentModel.IBindingList.SortDirection
            Get
                Return Me._blm1958066213.SortDirection
            End Get
        End Property
        
        Private ReadOnly Property SortProperty() As System.ComponentModel.PropertyDescriptor Implements System.ComponentModel.IBindingList.SortProperty
            Get
                Return Me._blm1958066213.SortProperty
            End Get
        End Property
        
        Private ReadOnly Property SupportsChangeNotification() As Boolean Implements System.ComponentModel.IBindingList.SupportsChangeNotification
            Get
                Return true
            End Get
        End Property
        
        Private ReadOnly Property SupportsSearching() As Boolean Implements System.ComponentModel.IBindingList.SupportsSearching
            Get
                Return Me._blm1958066213.SupportsSearching
            End Get
        End Property
        
        Private ReadOnly Property SupportsSorting() As Boolean Implements System.ComponentModel.IBindingList.SupportsSorting
            Get
                Return Me._blm1958066213.SupportsSorting
            End Get
        End Property
        
        Private ReadOnly Property RaisesItemChangedEvents() As Boolean Implements System.ComponentModel.IRaiseItemChangedEvents.RaisesItemChangedEvents
            Get
                Return Me.RaiseListChangedEvents
            End Get
        End Property
        
        Public Event AddingNew As System.ComponentModel.AddingNewEventHandler
        
        Public Event ListChanged As System.ComponentModel.ListChangedEventHandler Implements System.ComponentModel.IBindingList.ListChanged
        
        Protected Overridable Sub OnPropertyChanged(ByVal e As System.ComponentModel.PropertyChangedEventArgs)
            If (Me.RaisePropertyChangedEvents = false) Then
                Return
            End If
            If (Not (Me.PropertyChangedEvent) Is Nothing) Then
                RaiseEvent PropertyChanged(Me, e)
            End If
        End Sub
        
        Protected Overridable Sub OnCollectionChanged(ByVal e As System.ComponentModel.CollectionChangeEventArgs)
            If (Me.RaiseCollectionChangedEvents = false) Then
                Return
            End If
            If (Not (Me.CollectionChangedEvent) Is Nothing) Then
                RaiseEvent CollectionChanged(Me, e)
            End If
            CodeFluent.Runtime.ServiceModel.CollectionChangeNotifier.Notify(Me, e, Me._h2943838991)
            Me.OnPropertyChanged(New System.ComponentModel.PropertyChangedEventArgs("Count"))
            Me.OnPropertyChanged(New System.ComponentModel.PropertyChangedEventArgs("Item[]"))
        End Sub
        
        Protected Overridable Sub Relate(ByVal item As car1.Offer, ByVal relationType As CodeFluent.Runtime.CodeFluentRelationType)
            CType(Me,CodeFluent.Runtime.ICodeFluentSet).Relations(item) = relationType
        End Sub
        
        Public Function Add(ByVal offer As car1.Offer) As Integer
            Dim localAdd As Integer = Me.BaseList.Count
            Me.BaseAdd(offer)
            Return localAdd
        End Function
        
        Protected Overridable Function BaseAdd(ByVal offer As car1.Offer) As Integer
            If (offer Is Nothing) Then
                Throw New System.ArgumentNullException("offer")
            End If
            If (offer.Id = -1) Then
                CodeFluent.Runtime.CodeFluentRuntimeException.Throw("invalidEntityKey", "Id", "offer", "car1.Offer")
            End If
            Try 
                Me.BaseTable.Add(offer.Id, offer)
            Catch ane As System.ArgumentNullException
                Throw New System.ArgumentNullException(car1.Resources.Manager.GetUserMessage(Nothing, CodeFluent.Runtime.UserExceptionType.VoidCollectionKey, "car1.OfferCollection", offer.EntityKey), ane)
            Catch ae As System.ArgumentException
                Throw New System.ArgumentException(car1.Resources.Manager.GetUserMessage(Nothing, CodeFluent.Runtime.UserExceptionType.ItemAlreadyAdded, "car1.OfferCollection", offer.Id), ae)
            End Try
            AddHandler offer.KeyChanged, AddressOf Me.OnItemKeyChanged
            Me.Relate(offer, CodeFluent.Runtime.CodeFluentRelationType.Added)
            If (Not (Me._offersRentalAgreementRentals) Is Nothing) Then
                Me._offersRentalAgreementRentals.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified
            End If
            Dim localAdd As Integer = Me.BaseList.Count
            Me.BaseList.Add(offer)
            Me.OnCollectionChanged(New CodeFluent.Runtime.Utilities.IndexedCollectionChangeEventArgs(System.ComponentModel.CollectionChangeAction.Add, offer, localAdd))
            Me.OnListChanged(New System.ComponentModel.ListChangedEventArgs(System.ComponentModel.ListChangedType.ItemAdded, localAdd))
            Return localAdd
        End Function
        
        <System.ComponentModel.BrowsableAttribute(false),  _
         System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)>  _
        Function System_Collections_IList_Add(ByVal value As Object) As Integer Implements System.Collections.IList.Add
            Dim offer As car1.Offer = Nothing
            Try 
                offer = CType(value,car1.Offer)
            Catch icex As System.InvalidCastException
                offer = Nothing
                Dim key As String = Nothing
                Try 
                    key = CType(value,String)
                    Dim count As Integer = Me.Count
                    If (Not (Me.AddByEntityKey(key)) Is Nothing) Then
                        Return 1
                    End If
                    Return 0
                Catch icex1 As System.InvalidCastException
                    key = Nothing
                End Try
                If (key Is Nothing) Then
                    Throw New System.ArgumentException("value")
                End If
            End Try
            If (offer Is Nothing) Then
                Throw New System.ArgumentException("value")
            End If
            Dim localAdd As Integer = Me.Add(offer)
            Return localAdd
        End Function
        
        <System.ComponentModel.BrowsableAttribute(false),  _
         System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)>  _
        Sub System_Collections_Generic_ICollection_car1_Offer__Add(ByVal offer As car1.Offer) Implements System.Collections.Generic.ICollection(Of car1.Offer).Add
            Me.BaseAdd(offer)
        End Sub
        
        Public Overridable Function AddByEntityKey(ByVal key As String) As car1.Offer
            Dim offer As car1.Offer = car1.Offer.LoadByEntityKey(key)
            If ((Not (offer) Is Nothing)  _
                        AndAlso (Me.Contains(offer) = false)) Then
                Me.Add(offer)
            End If
            Return offer
        End Function
        
        Public Overloads Sub Sort()
            Me.Sort(Nothing)
        End Sub
        
        Public Overloads Overridable Sub Sort(ByVal comparer As System.Collections.Generic.IComparer(Of car1.Offer))
            Me.BaseList.Sort(comparer)
        End Sub
        
        Public Overloads Sub CopyTo(ByVal array() As car1.Offer, ByVal index As Integer) Implements System.Collections.Generic.ICollection(Of car1.Offer).CopyTo
            Me.BaseCopyTo(array, index)
        End Sub
        
        Protected Overridable Sub BaseCopyTo(ByVal array() As car1.Offer, ByVal index As Integer)
            Me.BaseList.CopyTo(array, index)
        End Sub
        
        <System.ComponentModel.BrowsableAttribute(false),  _
         System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)>  _
        Sub System_Collections_ICollection_CopyTo(ByVal array As System.Array, ByVal index As Integer) Implements System.Collections.ICollection.CopyTo
            CodeFluent.Runtime.Utilities.ConvertUtilities.CopyTo(Me, array, index)
        End Sub
        
        Public Function Contains(ByVal offer As car1.Offer) As Boolean Implements System.Collections.Generic.ICollection(Of car1.Offer).Contains
            Dim localContains As Boolean = Me.BaseContains(offer)
            Return localContains
        End Function
        
        Protected Overridable Function BaseContains(ByVal offer As car1.Offer) As Boolean
            If (offer Is Nothing) Then
                Return false
            End If
            Dim localContains As Boolean = Me.BaseTable.ContainsKey(offer.Id)
            Return localContains
        End Function
        
        <System.ComponentModel.BrowsableAttribute(false),  _
         System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)>  _
        Function System_Collections_IList_Contains(ByVal value As Object) As Boolean Implements System.Collections.IList.Contains
            Dim offer As car1.Offer
            Try 
                offer = CType(value,car1.Offer)
            Catch icex As System.InvalidCastException
                offer = Nothing
            End Try
            Return Me.Contains(offer)
        End Function
        
        Public Function IndexOf(ByVal offer As car1.Offer) As Integer Implements System.Collections.Generic.IList(Of car1.Offer).IndexOf
            Dim localIndexOf As Integer = Me.BaseIndexOf(offer)
            Return localIndexOf
        End Function
        
        Protected Overridable Function BaseIndexOf(ByVal offer As car1.Offer) As Integer
            If (offer Is Nothing) Then
                Return -1
            End If
            Dim localIndexOf As Integer = Me.BaseList.IndexOf(offer)
            Return localIndexOf
        End Function
        
        <System.ComponentModel.BrowsableAttribute(false),  _
         System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)>  _
        Function System_Collections_IList_IndexOf(ByVal value As Object) As Integer Implements System.Collections.IList.IndexOf
            Dim offer As car1.Offer
            Try 
                offer = CType(value,car1.Offer)
            Catch icex As System.InvalidCastException
                offer = Nothing
            End Try
            Return Me.IndexOf(offer)
        End Function
        
        Public Overloads Sub Insert(ByVal index As Integer, ByVal offer As car1.Offer) Implements System.Collections.Generic.IList(Of car1.Offer).Insert
            Me.BaseInsert(index, offer)
        End Sub
        
        Protected Overridable Sub BaseInsert(ByVal index As Integer, ByVal offer As car1.Offer)
            If (offer Is Nothing) Then
                Throw New System.ArgumentNullException("offer")
            End If
            Try 
                Me.BaseTable.Add(offer.Id, offer)
            Catch ane As System.ArgumentNullException
                Throw New System.ArgumentNullException(car1.Resources.Manager.GetUserMessage(Nothing, CodeFluent.Runtime.UserExceptionType.VoidCollectionKey, "car1.OfferCollection", offer.EntityKey), ane)
            Catch ae As System.ArgumentException
                Throw New System.ArgumentException(car1.Resources.Manager.GetUserMessage(Nothing, CodeFluent.Runtime.UserExceptionType.ItemAlreadyAdded, "car1.OfferCollection", offer.Id), ae)
            End Try
            Me.BaseList.Insert(index, offer)
            Me.Relate(offer, CodeFluent.Runtime.CodeFluentRelationType.Added)
            If (Not (Me._offersRentalAgreementRentals) Is Nothing) Then
                Me._offersRentalAgreementRentals.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified
            End If
            Me.OnCollectionChanged(New CodeFluent.Runtime.Utilities.IndexedCollectionChangeEventArgs(System.ComponentModel.CollectionChangeAction.Add, offer, index))
            Me.OnListChanged(New System.ComponentModel.ListChangedEventArgs(System.ComponentModel.ListChangedType.ItemAdded, index))
        End Sub
        
        <System.ComponentModel.BrowsableAttribute(false),  _
         System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)>  _
        Sub System_Collections_IList_Insert(ByVal index As Integer, ByVal value As Object) Implements System.Collections.IList.Insert
            Dim offer As car1.Offer
            Try 
                offer = CType(value,car1.Offer)
            Catch icex As System.InvalidCastException
                offer = Nothing
            End Try
            Me.Insert(index, offer)
        End Sub
        
        Public Overridable Sub Clear() Implements System.Collections.Generic.ICollection(Of car1.Offer).Clear
            Dim index As Integer
            Dim count As Integer = Me.Count
            index = 0
            Do While (index < count)
                Dim Offer As car1.Offer = Me(0)
                Me.BaseRemove(Offer)
                index = (index + 1)
            Loop
            Me.OnCollectionChanged(New CodeFluent.Runtime.Utilities.IndexedCollectionChangeEventArgs(System.ComponentModel.CollectionChangeAction.Refresh, Nothing))
            Me.OnListChanged(New System.ComponentModel.ListChangedEventArgs(System.ComponentModel.ListChangedType.Reset, -1))
        End Sub
        
        <System.ComponentModel.BrowsableAttribute(false),  _
         System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)>  _
        Sub System_Collections_IList_Clear() Implements System.Collections.IList.Clear
            Me.Clear
        End Sub
        
        Public Function Remove(ByVal offer As car1.Offer) As Boolean Implements System.Collections.Generic.ICollection(Of car1.Offer).Remove
            Return Me.BaseRemove(offer)
        End Function
        
        Protected Overridable Function BaseRemove(ByVal offer As car1.Offer) As Boolean
            If (offer Is Nothing) Then
                Throw New System.ArgumentNullException("offer")
            End If
            Dim index As Integer = Me.IndexOf(offer)
            Me.OnListChanged(New System.ComponentModel.ListChangedEventArgs(CType(CodeFluent.Runtime.Utilities.SortableBindingList(Of car1.Offer).ListChangedTypeDeleting,System.ComponentModel.ListChangedType), index))
            Dim ret As Boolean
            ret = Me.BaseList.Remove(offer)
            RemoveHandler offer.KeyChanged, AddressOf Me.OnItemKeyChanged
            ret = Me.BaseTable.Remove(offer.Id)
            Me.Relate(offer, CodeFluent.Runtime.CodeFluentRelationType.Removed)
            If (Not (Me._offersRentalAgreementRentals) Is Nothing) Then
                Me._offersRentalAgreementRentals.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified
            End If
            Me.OnCollectionChanged(New CodeFluent.Runtime.Utilities.IndexedCollectionChangeEventArgs(System.ComponentModel.CollectionChangeAction.Remove, offer, index))
            Me.OnListChanged(New System.ComponentModel.ListChangedEventArgs(System.ComponentModel.ListChangedType.ItemDeleted, index))
            Return ret
        End Function
        
        <System.ComponentModel.BrowsableAttribute(false),  _
         System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)>  _
        Sub System_Collections_IList_Remove(ByVal value As Object) Implements System.Collections.IList.Remove
            Dim offer As car1.Offer
            Try 
                offer = CType(value,car1.Offer)
            Catch icex As System.InvalidCastException
                offer = Nothing
            End Try
            Me.Remove(offer)
        End Sub
        
        Public Overridable Sub RemoveAt(ByVal index As Integer) Implements System.Collections.Generic.IList(Of car1.Offer).RemoveAt
            Me.OnListChanged(New System.ComponentModel.ListChangedEventArgs(CType(CodeFluent.Runtime.Utilities.SortableBindingList(Of car1.Offer).ListChangedTypeDeleting,System.ComponentModel.ListChangedType), index))
            Dim offer As car1.Offer = Me.BaseList(index)
            If (Not (offer) Is Nothing) Then
                RemoveHandler offer.KeyChanged, AddressOf Me.OnItemKeyChanged
                Me.BaseTable.Remove(offer.Id)
                Me.Relate(offer, CodeFluent.Runtime.CodeFluentRelationType.Removed)
            End If
            If (Not (Me._offersRentalAgreementRentals) Is Nothing) Then
                Me._offersRentalAgreementRentals.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified
            End If
            Me.BaseList.RemoveAt(index)
            Me.OnCollectionChanged(New CodeFluent.Runtime.Utilities.IndexedCollectionChangeEventArgs(System.ComponentModel.CollectionChangeAction.Remove, offer, index))
            Me.OnListChanged(New System.ComponentModel.ListChangedEventArgs(System.ComponentModel.ListChangedType.ItemDeleted, index))
        End Sub
        
        <System.ComponentModel.BrowsableAttribute(false),  _
         System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)>  _
        Sub System_Collections_IList_RemoveAt(ByVal index As Integer) Implements System.Collections.IList.RemoveAt
            Me.RemoveAt(index)
        End Sub
        
        Public Overridable Function GetEnumerator() As System.Collections.Generic.IEnumerator(Of car1.Offer) Implements System.Collections.Generic.IEnumerable(Of car1.Offer).GetEnumerator
            Dim e As System.Collections.Generic.IEnumerator(Of car1.Offer) = Me.BaseList.GetEnumerator
            Return e
        End Function
        
        <System.ComponentModel.BrowsableAttribute(false),  _
         System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)>  _
        Function System_Collections_IEnumerable_GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.BaseList.GetEnumerator
        End Function
        
        Private Function TryGetValue(ByVal key As Integer) As car1.Offer
            Dim offer As car1.Offer = Nothing
            If (Me.BaseTable.TryGetValue(key, offer) = true) Then
                Return offer
            End If
            Return Nothing
        End Function
        
        Public Sub SetItem(ByVal id As Integer, ByVal value As car1.Offer)
            If (id = -1) Then
                Throw New System.ArgumentNullException("id")
            End If
            If (value Is Nothing) Then
                Dim offer As car1.Offer = Me.TryGetValue(id)
                If (Not (offer) Is Nothing) Then
                    Me.Remove(offer)
                End If
                Return
            End If
            Me.BaseTable(value.Id) = value
        End Sub
        
        Public Function GetItem(ByVal id As Integer) As car1.Offer
            If (id = -1) Then
                Throw New System.ArgumentNullException("id")
            End If
            Dim i As car1.Offer = Me.TryGetValue(id)
            Return i
        End Function
        
        Public Overridable Sub SaveAll()
            Dim index As Integer
            index = (Me.Count - 1)
            Do While (index >= 0)
                Dim offer As car1.Offer = Me(index)
                offer.Save
                If (offer.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Deleted) Then
                    Me.Remove(offer)
                End If
                index = (index - 1)
            Loop
        End Sub
        
        Private Overloads Sub LoadAll(ByVal pageIndex As Integer, ByVal pageSize As Integer, ByVal pageOptions As CodeFluent.Runtime.PageOptions, ByVal reader As System.Data.IDataReader)
            If (reader Is Nothing) Then
                Throw New System.ArgumentNullException("reader")
            End If
            If (pageIndex < 0) Then
                pageIndex = 0
            End If
            If (pageSize < 0) Then
                If (Not (pageOptions) Is Nothing) Then
                    pageSize = pageOptions.DefaultPageSize
                Else
                    pageSize = Integer.MaxValue
                End If
            End If
            Me._unspecifiedCarGroupCarGroupUpgrade = Nothing
            Me._offersRentalAgreementRentals = Nothing
            Me.BaseList.Clear
            Me.BaseTable.Clear
            Dim count As Integer = 0
            Dim readCount As Integer = 0
            Dim readerRead As Boolean
            readerRead = reader.Read
            Do While ((readerRead = true)  _
                        AndAlso ((count < Me.MaxCount)  _
                        AndAlso (count < pageSize)))
                readCount = (readCount + 1)
                If (CodeFluent.Runtime.CodeFluentPersistence.CanAddEntity(pageIndex, pageSize, pageOptions, readCount) = true) Then
                    Dim offer As car1.Offer = New car1.Offer()
                    CType(offer,CodeFluent.Runtime.ICodeFluentEntity).ReadRecord(reader)
                    If (Me.BaseContains(offer) = false) Then
                        Me.BaseAdd(offer)
                        count = (count + 1)
                    End If
                    offer.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Unchanged
                End If
                readerRead = reader.Read
            Loop
        End Sub
        
        <System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Shared Function PageLoadAll(ByVal pageIndex As Integer, ByVal pageSize As Integer, ByVal pageOptions As CodeFluent.Runtime.PageOptions) As car1.OfferCollection
            If (pageIndex < 0) Then
                pageIndex = 0
            End If
            If (pageSize < 0) Then
                If (Not (pageOptions) Is Nothing) Then
                    pageSize = pageOptions.DefaultPageSize
                Else
                    pageSize = Integer.MaxValue
                End If
            End If
            Dim ret As car1.OfferCollection = New car1.OfferCollection()
            Dim reader As System.Data.IDataReader = Nothing
            Try 
                reader = car1.OfferCollection.PageDataLoadAll(pageOptions)
                If (reader Is Nothing) Then
                    Return ret
                End If
                ret.LoadAll(pageIndex, pageSize, pageOptions, reader)
            Finally
                If (Not (reader) Is Nothing) Then
                    reader.Dispose
                End If
                CodeFluent.Runtime.CodeFluentPersistence.CompleteCommand(car1.Constants.car1StoreName)
            End Try
            Return ret
        End Function
        
        <System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Shared Function LoadAll() As car1.OfferCollection
            Dim ret As car1.OfferCollection = car1.OfferCollection.PageLoadAll(Integer.MinValue, Integer.MaxValue, Nothing)
            Return ret
        End Function
        
        Public Shared Function PageDataLoadAll(ByVal pageOptions As CodeFluent.Runtime.PageOptions) As System.Data.IDataReader
            Dim persistence As CodeFluent.Runtime.CodeFluentPersistence = CodeFluentContext.Get(car1.Constants.car1StoreName).Persistence
            persistence.CreateStoredProcedureCommand(Nothing, "Offer", "LoadAll")
            If (Not (pageOptions) Is Nothing) Then
                Dim enumerator As System.Collections.IEnumerator = pageOptions.OrderByArguments.GetEnumerator
                Dim b As Boolean
                Dim index As Integer = 0
                b = enumerator.MoveNext
                Do While b
                    Dim argument As CodeFluent.Runtime.OrderByArgument = CType(enumerator.Current,CodeFluent.Runtime.OrderByArgument)
                    persistence.AddParameter(String.Format("@_orderBy{0}", index), argument.Name)
                    persistence.AddParameter(String.Format("@_orderByDirection{0}", index), CType(argument.Direction,Integer))
                    index = (index + 1)
                    b = enumerator.MoveNext
                Loop
            End If
            Dim reader As System.Data.IDataReader = CodeFluentContext.Get(car1.Constants.car1StoreName).Persistence.ExecuteReader
            Return reader
        End Function
        
        Public Shared Function DataLoadAll() As System.Data.IDataReader
            Dim reader As System.Data.IDataReader = car1.OfferCollection.PageDataLoadAll(Nothing)
            Return reader
        End Function
        
        Private Overloads Sub LoadByCarGroupUpgrade(ByVal pageIndex As Integer, ByVal pageSize As Integer, ByVal pageOptions As CodeFluent.Runtime.PageOptions, ByVal reader As System.Data.IDataReader, ByVal carGroupUpgrade As car1.CarGroup)
            If (reader Is Nothing) Then
                Throw New System.ArgumentNullException("reader")
            End If
            If (pageIndex < 0) Then
                pageIndex = 0
            End If
            If (pageSize < 0) Then
                If (Not (pageOptions) Is Nothing) Then
                    pageSize = pageOptions.DefaultPageSize
                Else
                    pageSize = Integer.MaxValue
                End If
            End If
            Dim carGroupState As CodeFluent.Runtime.CodeFluentEntityState = CodeFluent.Runtime.CodeFluentEntityState.Unchanged
            If (Not (carGroupUpgrade) Is Nothing) Then
                carGroupState = carGroupUpgrade.EntityState
            End If
            Me._unspecifiedCarGroupCarGroupUpgrade = carGroupUpgrade
            Me._offersRentalAgreementRentals = Nothing
            Me.BaseList.Clear
            Me.BaseTable.Clear
            Dim count As Integer = 0
            Dim readCount As Integer = 0
            Dim readerRead As Boolean
            readerRead = reader.Read
            Do While ((readerRead = true)  _
                        AndAlso ((count < Me.MaxCount)  _
                        AndAlso (count < pageSize)))
                readCount = (readCount + 1)
                If (CodeFluent.Runtime.CodeFluentPersistence.CanAddEntity(pageIndex, pageSize, pageOptions, readCount) = true) Then
                    Dim offer As car1.Offer = New car1.Offer()
                    CType(offer,CodeFluent.Runtime.ICodeFluentEntity).ReadRecord(reader)
                    If (Me.BaseContains(offer) = false) Then
                        Me.BaseAdd(offer)
                        count = (count + 1)
                    End If
                    offer.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Unchanged
                End If
                readerRead = reader.Read
            Loop
            If (Not (carGroupUpgrade) Is Nothing) Then
                carGroupUpgrade.EntityState = carGroupState
            End If
        End Sub
        
        <System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Shared Function PageLoadByCarGroupUpgrade(ByVal pageIndex As Integer, ByVal pageSize As Integer, ByVal pageOptions As CodeFluent.Runtime.PageOptions, ByVal carGroupUpgrade As car1.CarGroup) As car1.OfferCollection
            If (pageIndex < 0) Then
                pageIndex = 0
            End If
            If (pageSize < 0) Then
                If (Not (pageOptions) Is Nothing) Then
                    pageSize = pageOptions.DefaultPageSize
                Else
                    pageSize = Integer.MaxValue
                End If
            End If
            Dim ret As car1.OfferCollection = New car1.OfferCollection()
            Dim reader As System.Data.IDataReader = Nothing
            Try 
                reader = car1.OfferCollection.PageDataLoadByCarGroupUpgrade(pageOptions, carGroupUpgrade)
                If (reader Is Nothing) Then
                    Return ret
                End If
                ret.LoadByCarGroupUpgrade(pageIndex, pageSize, pageOptions, reader, carGroupUpgrade)
            Finally
                If (Not (reader) Is Nothing) Then
                    reader.Dispose
                End If
                CodeFluent.Runtime.CodeFluentPersistence.CompleteCommand(car1.Constants.car1StoreName)
            End Try
            Return ret
        End Function
        
        <System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Shared Function LoadByCarGroupUpgrade(ByVal carGroupUpgrade As car1.CarGroup) As car1.OfferCollection
            Dim ret As car1.OfferCollection = car1.OfferCollection.PageLoadByCarGroupUpgrade(Integer.MinValue, Integer.MaxValue, Nothing, carGroupUpgrade)
            Return ret
        End Function
        
        Public Shared Function PageDataLoadByCarGroupUpgrade(ByVal pageOptions As CodeFluent.Runtime.PageOptions, ByVal carGroupUpgrade As car1.CarGroup) As System.Data.IDataReader
            If (carGroupUpgrade Is Nothing) Then
                Return Nothing
            End If
            If (carGroupUpgrade.Id = -1) Then
                CodeFluent.Runtime.CodeFluentRuntimeException.Throw("invalidEntityKey", "Id", "carGroupUpgrade", "car1.CarGroup")
            End If
            Dim persistence As CodeFluent.Runtime.CodeFluentPersistence = CodeFluentContext.Get(car1.Constants.car1StoreName).Persistence
            persistence.CreateStoredProcedureCommand(Nothing, "Offer", "LoadByCarGroupUpgrade")
            persistence.AddParameter("@CarGroupUpgradeId", carGroupUpgrade.Id, CType(-1,Integer))
            If (Not (pageOptions) Is Nothing) Then
                Dim enumerator As System.Collections.IEnumerator = pageOptions.OrderByArguments.GetEnumerator
                Dim b As Boolean
                Dim index As Integer = 0
                b = enumerator.MoveNext
                Do While b
                    Dim argument As CodeFluent.Runtime.OrderByArgument = CType(enumerator.Current,CodeFluent.Runtime.OrderByArgument)
                    persistence.AddParameter(String.Format("@_orderBy{0}", index), argument.Name)
                    persistence.AddParameter(String.Format("@_orderByDirection{0}", index), CType(argument.Direction,Integer))
                    index = (index + 1)
                    b = enumerator.MoveNext
                Loop
            End If
            Dim reader As System.Data.IDataReader = CodeFluentContext.Get(car1.Constants.car1StoreName).Persistence.ExecuteReader
            Return reader
        End Function
        
        Public Shared Function DataLoadByCarGroupUpgrade(ByVal carGroupUpgrade As car1.CarGroup) As System.Data.IDataReader
            Dim reader As System.Data.IDataReader = car1.OfferCollection.PageDataLoadByCarGroupUpgrade(Nothing, carGroupUpgrade)
            Return reader
        End Function
        
        Private Overloads Sub LoadOffersRentalsByRentalAgreement(ByVal pageIndex As Integer, ByVal pageSize As Integer, ByVal pageOptions As CodeFluent.Runtime.PageOptions, ByVal reader As System.Data.IDataReader, ByVal rentalAgreement As car1.RentalAgreement)
            If (reader Is Nothing) Then
                Throw New System.ArgumentNullException("reader")
            End If
            If (pageIndex < 0) Then
                pageIndex = 0
            End If
            If (pageSize < 0) Then
                If (Not (pageOptions) Is Nothing) Then
                    pageSize = pageOptions.DefaultPageSize
                Else
                    pageSize = Integer.MaxValue
                End If
            End If
            Dim rentalAgreementState As CodeFluent.Runtime.CodeFluentEntityState = CodeFluent.Runtime.CodeFluentEntityState.Unchanged
            If (Not (rentalAgreement) Is Nothing) Then
                rentalAgreementState = rentalAgreement.EntityState
            End If
            Me._unspecifiedCarGroupCarGroupUpgrade = Nothing
            Me._offersRentalAgreementRentals = rentalAgreement
            Me.BaseList.Clear
            Me.BaseTable.Clear
            Dim count As Integer = 0
            Dim readCount As Integer = 0
            Dim readerRead As Boolean
            readerRead = reader.Read
            Do While ((readerRead = true)  _
                        AndAlso ((count < Me.MaxCount)  _
                        AndAlso (count < pageSize)))
                readCount = (readCount + 1)
                If (CodeFluent.Runtime.CodeFluentPersistence.CanAddEntity(pageIndex, pageSize, pageOptions, readCount) = true) Then
                    Dim offer As car1.Offer = New car1.Offer()
                    CType(offer,CodeFluent.Runtime.ICodeFluentEntity).ReadRecord(reader)
                    If (Me.BaseContains(offer) = false) Then
                        Me.BaseAdd(offer)
                        count = (count + 1)
                    End If
                    offer.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Unchanged
                End If
                readerRead = reader.Read
            Loop
            If (Not (rentalAgreement) Is Nothing) Then
                rentalAgreement.EntityState = rentalAgreementState
            End If
        End Sub
        
        <System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Shared Function PageLoadOffersRentalsByRentalAgreement(ByVal pageIndex As Integer, ByVal pageSize As Integer, ByVal pageOptions As CodeFluent.Runtime.PageOptions, ByVal rentalAgreement As car1.RentalAgreement) As car1.OfferCollection
            If (pageIndex < 0) Then
                pageIndex = 0
            End If
            If (pageSize < 0) Then
                If (Not (pageOptions) Is Nothing) Then
                    pageSize = pageOptions.DefaultPageSize
                Else
                    pageSize = Integer.MaxValue
                End If
            End If
            Dim ret As car1.OfferCollection = New car1.OfferCollection()
            Dim reader As System.Data.IDataReader = Nothing
            Try 
                reader = car1.OfferCollection.PageDataLoadOffersRentalsByRentalAgreement(pageOptions, rentalAgreement)
                If (reader Is Nothing) Then
                    Return ret
                End If
                ret.LoadOffersRentalsByRentalAgreement(pageIndex, pageSize, pageOptions, reader, rentalAgreement)
            Finally
                If (Not (reader) Is Nothing) Then
                    reader.Dispose
                End If
                CodeFluent.Runtime.CodeFluentPersistence.CompleteCommand(car1.Constants.car1StoreName)
            End Try
            Return ret
        End Function
        
        <System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Shared Function LoadOffersRentalsByRentalAgreement(ByVal rentalAgreement As car1.RentalAgreement) As car1.OfferCollection
            Dim ret As car1.OfferCollection = car1.OfferCollection.PageLoadOffersRentalsByRentalAgreement(Integer.MinValue, Integer.MaxValue, Nothing, rentalAgreement)
            Return ret
        End Function
        
        Public Shared Function PageDataLoadOffersRentalsByRentalAgreement(ByVal pageOptions As CodeFluent.Runtime.PageOptions, ByVal rentalAgreement As car1.RentalAgreement) As System.Data.IDataReader
            If (rentalAgreement Is Nothing) Then
                Return Nothing
            End If
            If (rentalAgreement.Id = -1) Then
                CodeFluent.Runtime.CodeFluentRuntimeException.Throw("invalidEntityKey", "Id", "rentalAgreement", "car1.RentalAgreement")
            End If
            Dim persistence As CodeFluent.Runtime.CodeFluentPersistence = CodeFluentContext.Get(car1.Constants.car1StoreName).Persistence
            persistence.CreateStoredProcedureCommand(Nothing, "Offer", "LoadOffersRentalsByRentalAgreement")
            persistence.AddParameter("@RentalAgreementId", rentalAgreement.Id, CType(-1,Integer))
            If (Not (pageOptions) Is Nothing) Then
                Dim enumerator As System.Collections.IEnumerator = pageOptions.OrderByArguments.GetEnumerator
                Dim b As Boolean
                Dim index As Integer = 0
                b = enumerator.MoveNext
                Do While b
                    Dim argument As CodeFluent.Runtime.OrderByArgument = CType(enumerator.Current,CodeFluent.Runtime.OrderByArgument)
                    persistence.AddParameter(String.Format("@_orderBy{0}", index), argument.Name)
                    persistence.AddParameter(String.Format("@_orderByDirection{0}", index), CType(argument.Direction,Integer))
                    index = (index + 1)
                    b = enumerator.MoveNext
                Loop
            End If
            Dim reader As System.Data.IDataReader = CodeFluentContext.Get(car1.Constants.car1StoreName).Persistence.ExecuteReader
            Return reader
        End Function
        
        Public Shared Function DataLoadOffersRentalsByRentalAgreement(ByVal rentalAgreement As car1.RentalAgreement) As System.Data.IDataReader
            Dim reader As System.Data.IDataReader = car1.OfferCollection.PageDataLoadOffersRentalsByRentalAgreement(Nothing, rentalAgreement)
            Return reader
        End Function
        
        Protected Overridable Sub BaseTrace(ByVal writer As System.CodeDom.Compiler.IndentedTextWriter)
            writer.Write("[")
            writer.Write(String.Concat("Count=", Me.Count))
            writer.Write("]")
        End Sub
        
        Public Function Trace() As String
            Dim stringBuilder As System.Text.StringBuilder = New System.Text.StringBuilder()
            Dim stringWriter As System.IO.StringWriter = New System.IO.StringWriter(stringBuilder, System.Globalization.CultureInfo.CurrentCulture)
            Dim writer As System.CodeDom.Compiler.IndentedTextWriter = New System.CodeDom.Compiler.IndentedTextWriter(stringWriter)
            Me.BaseTrace(writer)
            writer.Flush
            CType(writer,System.IDisposable).Dispose
            CType(stringWriter,System.IDisposable).Dispose
            Dim sr As String = stringBuilder.ToString
            Return sr
        End Function
        
        <System.ComponentModel.BrowsableAttribute(false),  _
         System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)>  _
        Sub CodeFluent_Runtime_ICodeFluentObject_Trace(ByVal writer As System.CodeDom.Compiler.IndentedTextWriter) Implements CodeFluent.Runtime.ICodeFluentObject.Trace
            Me.BaseTrace(writer)
        End Sub
        
        Public Overloads Overridable Sub CopyTo(ByVal collection As car1.OfferCollection, ByVal deep As Boolean)
            If (GetType(System.ICloneable).IsAssignableFrom(GetType(car1.Offer)) = false) Then
                deep = false
            End If
            Dim enumerator As System.Collections.Generic.IEnumerator(Of car1.Offer) = Me.GetEnumerator
            Dim b As Boolean
            b = enumerator.MoveNext
            Do While b
                If (deep = true) Then
                    collection.Add(CType(CType(enumerator.Current,System.ICloneable).Clone,car1.Offer))
                Else
                    collection.Add(enumerator.Current)
                End If
                b = enumerator.MoveNext
            Loop
        End Sub
        
        Public Overridable Function Clone(ByVal deep As Boolean) As car1.OfferCollection
            Dim ret As car1.OfferCollection = New car1.OfferCollection()
            Me.CopyTo(ret, deep)
            Return ret
        End Function
        
        <System.ComponentModel.BrowsableAttribute(false),  _
         System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)>  _
        Function System_ICloneable_Clone() As Object Implements System.ICloneable.Clone
            Return Me.Clone(true)
        End Function
        
        Public Overridable Sub CancelNew(ByVal index As Integer) Implements System.ComponentModel.ICancelAddNew.CancelNew
            If ((Me._addNewPos >= 0)  _
                        AndAlso (Me._addNewPos = index)) Then
                Me.RemoveAt(index)
                Me._addNewPos = -1
            End If
        End Sub
        
        Public Overridable Sub EndNew(ByVal index As Integer) Implements System.ComponentModel.ICancelAddNew.EndNew
            If ((Me._addNewPos >= 0)  _
                        AndAlso (Me._addNewPos = index)) Then
                Me._addNewPos = -1
            End If
        End Sub
        
        Private Sub AddIndex(ByVal [property] As System.ComponentModel.PropertyDescriptor) Implements System.ComponentModel.IBindingList.AddIndex
            Me._blm1958066213.AddIndex([property])
        End Sub
        
        Protected Overridable Sub OnAddingNew(ByVal e As System.ComponentModel.AddingNewEventArgs)
            If (Not (Me.AddingNewEvent) Is Nothing) Then
                RaiseEvent AddingNew(Me, e)
            End If
        End Sub
        
        Private Function AddNew() As Object Implements System.ComponentModel.IBindingList.AddNew
            Dim add As car1.Offer = New car1.Offer()
            Dim e As System.ComponentModel.AddingNewEventArgs = New System.ComponentModel.AddingNewEventArgs(add)
            Me.OnAddingNew(e)
            add = CType(e.NewObject,car1.Offer)
            If (add Is Nothing) Then
                add = New car1.Offer()
            End If
            add.Id = 0
            Me._addNewPos = Me.Add(add)
            Return add
        End Function
        
        Private Sub ApplySort(ByVal [property] As System.ComponentModel.PropertyDescriptor, ByVal direction As System.ComponentModel.ListSortDirection) Implements System.ComponentModel.IBindingList.ApplySort
            Me._blm1958066213.ApplySort([property], direction)
        End Sub
        
        Private Function Find(ByVal [property] As System.ComponentModel.PropertyDescriptor, ByVal key As Object) As Integer Implements System.ComponentModel.IBindingList.Find
            Return Me._blm1958066213.Find([property], key)
        End Function
        
        Private Sub RemoveIndex(ByVal [property] As System.ComponentModel.PropertyDescriptor) Implements System.ComponentModel.IBindingList.RemoveIndex
            Me._blm1958066213.RemoveIndex([property])
        End Sub
        
        Private Sub RemoveSort() Implements System.ComponentModel.IBindingList.RemoveSort
            Me._blm1958066213.RemoveSort
        End Sub
        
        Protected Overridable Sub OnListChanged(ByVal e As System.ComponentModel.ListChangedEventArgs)
            If (e Is Nothing) Then
                Throw New System.ArgumentNullException("e")
            End If
            If (Me.RaiseListChangedEvents = false) Then
                Return
            End If
            If (((e.ListChangedType = System.ComponentModel.ListChangedType.Reset)  _
                        = false)  _
                        AndAlso (e.NewIndex < 0)) Then
                Return
            End If
            If (Not (Me.ListChangedEvent) Is Nothing) Then
                RaiseEvent ListChanged(Me, e)
            End If
        End Sub
        
        Public Sub AddRange(ByVal collection As System.Collections.Generic.IEnumerable(Of car1.Offer))
            CodeFluent.Runtime.Utilities.ConvertUtilities.AddRange(Me, collection)
        End Sub
        
        Private Sub OnItemKeyChanged(ByVal sender As Object, ByVal e As CodeFluent.Runtime.Utilities.KeyChangedEventArgs(Of Integer))
            If (e Is Nothing) Then
                Throw New System.ArgumentNullException("e")
            End If
            Dim existing As car1.Offer = Nothing
            If (Me.BaseTable.TryGetValue(e.OldKey, existing) = false) Then
                Return
            End If
            If ((Not (sender) Is Nothing)  _
                        AndAlso (GetType(CodeFluent.Runtime.Utilities.IKeyable(Of Integer)).IsAssignableFrom(sender.GetType) = true)) Then
                Dim item As CodeFluent.Runtime.Utilities.IKeyable(Of Integer) = CType(sender,CodeFluent.Runtime.Utilities.IKeyable(Of Integer))
                Try 
                    Me.BaseTable.Add(item.Key, existing)
                Catch ane As System.ArgumentNullException
                    Throw New System.ArgumentNullException(car1.Resources.Manager.GetUserMessage(Nothing, CodeFluent.Runtime.UserExceptionType.VoidCollectionKey, "car1.OfferCollection", CType(item,CodeFluent.Runtime.ICodeFluentEntity).EntityKey), ane)
                Catch ae As System.ArgumentException
                    Throw New System.ArgumentException(car1.Resources.Manager.GetUserMessage(Nothing, CodeFluent.Runtime.UserExceptionType.ItemAlreadyAdded, "car1.OfferCollection", item.Key), ae)
                End Try
                Me.BaseTable.Remove(e.OldKey)
            End If
        End Sub
        
        <System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Shared Function PageLoadAll(ByVal pageIndex As Integer, ByVal pageSize As Integer) As car1.OfferCollection
            Return car1.OfferCollection.PageLoadAll(pageIndex, pageSize, Nothing)
        End Function
        
        <System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Shared Function PageLoadByCarGroupUpgrade(ByVal pageIndex As Integer, ByVal pageSize As Integer, ByVal carGroupUpgradeId As Integer) As car1.OfferCollection
            Dim carGroup As car1.CarGroup = car1.CarGroup.Load(carGroupUpgradeId)
            If (carGroup Is Nothing) Then
                Return New car1.OfferCollection()
            End If
            Return car1.OfferCollection.PageLoadByCarGroupUpgrade(pageIndex, pageSize, Nothing, carGroup)
        End Function
        
        <System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Shared Function PageLoadOffersRentalsByRentalAgreement(ByVal pageIndex As Integer, ByVal pageSize As Integer, ByVal rentalAgreementId As Integer) As car1.OfferCollection
            Dim rentalAgreement As car1.RentalAgreement = car1.RentalAgreement.Load(rentalAgreementId)
            If (rentalAgreement Is Nothing) Then
                Return New car1.OfferCollection()
            End If
            Return car1.OfferCollection.PageLoadOffersRentalsByRentalAgreement(pageIndex, pageSize, Nothing, rentalAgreement)
        End Function
        
        <System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Shared Function Save(ByVal offer As car1.Offer) As Boolean
            If (offer Is Nothing) Then
                Return false
            End If
            Dim ret As Boolean = offer.Save
            Return ret
        End Function
        
        <System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Shared Function Insert(ByVal offer As car1.Offer) As Boolean
            Dim ret As Boolean = car1.Offer.Save(offer)
            Return ret
        End Function
        
        <System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Shared Function Delete(ByVal offer As car1.Offer) As Boolean
            If (offer Is Nothing) Then
                Return false
            End If
            Dim ret As Boolean = offer.Delete
            Return ret
        End Function
    End Class
End Namespace
